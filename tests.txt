Describe: Player(name)
  Test: 
    will create a player with desired name with scores 0, no games won
  Code: 
    const player1 = new Player('Jem')
    player1
  Expect:
    Player {
      name: 'Jem',
      score: { total: 0, turn: 0 },
      gamesWon: 0,
    }

  Describe: Player.prototype.roll()
    Test:
      rolling either sets your turn score to 0 or to a number 2-6 greater than your previous
    Code:
      const previousScore = player1.score.turn
      player1.roll()
      const newScore = player1.score.turn
      (
      newScore === 0 
      ||
      newScore >= previousScore + 2 && newScore <= previousScore + 6
      )
    Expect: 
      true
      
  Describe: Player.prototype.hold()
    Test:
      player sets score.current to 0 and adds what it was into score.total
    Code:
      const previousTurnScore = player1.score.turn
      const previousTotalScore = player1.score.total
      player1.hold()
      player1.score
    Expect:
      Object {
        turn: 0,
        total: previousTurnScore + previousTotalScore
      }

Describe: Game(number)
  Test:
    Will create game object with empty player roster
  Code:
    const game = new Game()
    game
  Expect:
    Game {
      gamePhase: ['title-card', 'sign-in', 'gameplay', 'recap']
      gamesPlayed: 0,
      players: []
    }

  Describe: Game.prototype.addPlayer(name)
    Test:
      Will add player to game.players
    Code:
      currentGame.addPlayer('John')
      currentGame.players
    Expect:
      [ 
        Player {
          name: 'John',
          score: { total: 0, current: 0 },
          gamesWon: 0,
        }, 
      ]

  Describe: Game.prototype.endTurn()
    Test: 
      Will push the first player position to the last player position
    Code: 
      const playerEndingTurn = currentGame.players[0] 
      currentGame.endTurn()
      playerEndingTurn === currentGame.players[players.length - 1]
    Expect:
      true

  Describe: Game.prototype.checkWin(playerEndingTurn)
    Test:
      If player's total score is < 100, keep gamePhase at 'gameplay'
    Code:
      const playerEndingTurn = Player {
          name: 'John',
          score: { total: 99, current: 0 },
          gamesWon: 0,
        } 
      currentGame.checkWin(playerEndingTurn)
      game.gamePhase[0]
    Expect:
      'gameplay'

    Test:
      If player's total score is >= 100, set gamePhase to 'recap'
    Code:
      const playerEndingTurn = Player {
          name: 'John',
          score: { total: 100, current: 0 },
          gamesWon: 0,
        } 
      currentGame.checkWin(playerEndingTurn)
      game.gamePhase[0]
    Expect:
      'recap'

    Test:
      If player's total score is >= 100, add 1 to gamesWon
    Code:
      const playerEndingTurn = Player {
          name: 'John',
          score: { total: 100, current: 0 },
          gamesWon: 0,
        } 
      currentGame.checkWin(playerEndingTurn)
      playerEndingTurn.gamesWon
    Expect:
      1

  Describe: Game.prototype.advancePhase()
    Test:
      move zeroth phase to last place in gamePhase, making previous first phase zeroth  
    Code:
      const previousZeroth = game.gamePhase[0]
      const previousFirst = game.gamePhase[1]
      currentGame.advancePhase(1)
      (
        game.gamePhase[0] === previousFirst
        &&
        game.gamePhase[game.gamePhase.length - 1] === previousZeroth
      )
    Expect:
      true

  Describe: Game.prototype.resetGame()
    Test:
      move zeroth phase to last place in gamePhase, making previous first phase zeroth  
    Code:
      const previousZeroth = game.gamePhase[0]
      const previousFirst = game.gamePhase[1]
      const previousSecond = game.gamePhase[2]
      currentGame.advancePhase(2)
      (
        game.gamePhase[0] === previousSecond
        &&
        game.gamePhase[game.gamePhase.length - 1] === previousFirst
        &&
        game.gamePhase[game.gamePhase.length - 2] === previousZeroth
      )
    Expect:
      true