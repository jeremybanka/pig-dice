Describe: Player(name)
  Test: 
    will create a player with desired name with scores 0, no games won
  Code: 
    const player1 = new Player('Jem')
    player1
  Expect:
    Player {
      name: 'Jem',
      score: { total: 0, current: 0 },
      gamesWon: 0,
    }

  Describe: Player.prototype.roll()
    Test:
      will create random number between 1 and 6 or 
    Code: 
      const previousScore = player1.score.current
      player1.roll()
      const newScore = player1.score.current
      (
      newScore === 0 
      ||
      newScore >= previousScore + 2 && newScore <= previousScore + 6
      )
    Expect: 
      true
      
  Describe: Player.prototype.hold()
    Test:
      player sets score.current to 0 and adds what it was into score.total
    Code:
      const previousTurnScore = player1.score.turn
      const previousTotalScore = player1.score.total
      player1.hold()
      player1.score
      game.players
    Expect: 
      Object {
        turn: 0,
        total: previousTurnScore + previousTotalScore
      }

Describe: Game(number)
  Test:
    Will create game object with 2 players
  Code:
    const game = new Game(2)
    game
  Expect:
    Game {
      gameHasStarted: false,
      gamesPlayed: 0,
      players: [null, null]
    }

  Describe: Game.prototype.addPlayer(name)
    Test:
      Will add player to game.players
    Code:
      currentGame.addPlayer('John', 0)
      currentGame.players
    Expect:
      [ 
        Player {
          name: 'John',
          score: { total: 0, current: 0 },
          gamesWon: 0,
        }, 
      ]

  Describe: Game.prototype.endTurn()
    Test: 
      Will push the first player position to the last player position
    Code: 
      const playerLastTurn = currentGame.players[0] 
      currentGame.endTurn()
      playerLastTurn === currentGame.players[players.length - 1]
    Expect:
      true
